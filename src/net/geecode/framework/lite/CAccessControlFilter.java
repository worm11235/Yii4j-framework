/**
 * 
 */
package net.geecode.framework.lite;

import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;

import net.geecode.framework.base.CApplication;
import net.geecode.framework.base.CComponent;
import static net.geecode.php.base.Global.*;

/**
 * @author David
 *
 */
/**
 * Yii bootstrap file.
 *
 * This file is automatically generated using 'build lite' command.
 * It is the result of merging commonly used Yii class files with
 * comments and trace statements removed away.
 *
 * By using this file instead of yii.php, an Yii application may
 * improve performance due to the reduction of PHP parsing time.
 * The performance improvement is especially obvious when PHP APC extension
 * is enabled.
 *
 * DO NOT modify this file manually.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @link http://www.yiiframework.com/
 * @copyright 2008-2013 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 * @version $Id: $
 * @since 1.0
 */

//class CEnumerable
//{
//    static
//    {
//        
//        spl_autoload_register(Arrays.asList("YiiBase", "autoload"));
//    }
//}
class CFilterChain extends CList
{
    public $controller;
    public $action;
    public $filterIndex=0;
    public function __construct($controller,$action)
    {
        $this->controller=$controller;
        $this->action=$action;
    }
    public static function create($controller,$action,$filters)
    {
        $chain=new CFilterChain($controller,$action);
        $actionID=$action->getId();
        foreach($filters as $filter)
        {
            if(is_string($filter))  // filterName [+|- action1 action2]
            {
                if(($pos=strpos($filter,'+'))!==false || ($pos=strpos($filter,'-'))!==false)
                {
                    $matched=preg_match("/\b{$actionID}\b/i",substr($filter,$pos+1))>0;
                    if(($filter[$pos]==='+')===$matched)
                        $filter=CInlineFilter::create($controller,trim(substr($filter,0,$pos)));
                }
                else
                    $filter=CInlineFilter::create($controller,$filter);
            }
            elseif(is_array($filter))  // array('path.to.class [+|- action1, action2]','param1'=>'value1',...)
            {
                if(!isset($filter[0]))
                    throw new CException(Yii::t('yii','The first element in a filter configuration must be the filter class.'));
                $filterClass=$filter[0];
                unset($filter[0]);
                if(($pos=strpos($filterClass,'+'))!==false || ($pos=strpos($filterClass,'-'))!==false)
                {
                    $matched=preg_match("/\b{$actionID}\b/i",substr($filterClass,$pos+1))>0;
                    if(($filterClass[$pos]==='+')===$matched)
                        $filterClass=trim(substr($filterClass,0,$pos));
                    else
                        continue;
                }
                $filter['class']=$filterClass;
                $filter=Yii::createComponent($filter);
            }
            if(is_object($filter))
            {
                $filter->init();
                $chain->add($filter);
            }
        }
        return $chain;
    }
    public function insertAt($index,$item)
    {
        if($item instanceof IFilter)
            parent::insertAt($index,$item);
        else
            throw new CException(Yii::t('yii','CFilterChain can only take objects implementing the IFilter interface.'));
    }
    public function run()
    {
        if($this->offsetExists($this->filterIndex))
        {
            $filter=$this->itemAt($this->filterIndex++);
            $filter->filter($this);
        }
        else
            $this->controller->runAction($this->action);
    }
}
class CFilter extends CComponent implements IFilter
{
    public function filter($filterChain)
    {
        if($this->preFilter($filterChain))
        {
            $filterChain->run();
            $this->postFilter($filterChain);
        }
    }
    public function init()
    {
    }
    protected function preFilter($filterChain)
    {
        return true;
    }
    protected function postFilter($filterChain)
    {
    }
}
class CInlineFilter extends CFilter
{
    public $name;
    public static function create($controller,$filterName)
    {
        if(method_exists($controller,'filter'.$filterName))
        {
            $filter=new CInlineFilter;
            $filter->name=$filterName;
            return $filter;
        }
        else
            throw new CException(Yii::t('yii','Filter "{filter}" is invalid. Controller "{class}" does not have the filter method "filter{filter}".',
                array('{filter}'=>$filterName, '{class}'=>get_class($controller))));
    }
    public function filter($filterChain)
    {
        $method='filter'.$this->name;
        $filterChain->controller->$method($filterChain);
    }
}
public class CAccessControlFilter extends CFilter
{
    public String message;
    private Map _rules=array();
    public Map getRules()
    {
        return this._rules;
    }
    public boolean setRules($rules)
    {
        foreach($rules as $rule)
        {
            if(is_array($rule) && isset($rule[0]))
            {
                $r=new CAccessRule;
                $r->allow=$rule[0]==='allow';
                foreach(array_slice($rule,1) as $name=>$value)
                {
                    if($name==='expression' || $name==='roles' || $name==='message' || $name==='deniedCallback')
                        $r->$name=$value;
                    else
                        $r->$name=array_map('strtolower',$value);
                }
                $this->_rules[]=$r;
            }
        }
    }
    protected function preFilter($filterChain)
    {
        $app=Yii::app();
        $request=$app->getRequest();
        $user=$app->getUser();
        $verb=$request->getRequestType();
        $ip=$request->getUserHostAddress();
        foreach($this->getRules() as $rule)
        {
            if(($allow=$rule->isUserAllowed($user,$filterChain->controller,$filterChain->action,$ip,$verb))>0) // allowed
                break;
            elseif($allow<0) // denied
            {
                if(isset($rule->deniedCallback))
                    call_user_func($rule->deniedCallback, $rule);
                else
                    $this->accessDenied($user,$this->resolveErrorMessage($rule));
                return false;
            }
        }
        return true;
    }
    protected function resolveErrorMessage($rule)
    {
        if($rule->message!==null)
            return $rule->message;
        elseif($this->message!==null)
            return $this->message;
        else
            return Yii::t('yii','You are not authorized to perform this action.');
    }
    protected function accessDenied($user,$message)
    {
        if($user->getIsGuest())
            $user->loginRequired();
        else
            throw new CHttpException(403,$message);
    }
}
class CAccessRule extends CComponent
{
    public $allow;
    public $actions;
    public $controllers;
    public $users;
    public $roles;
    public $ips;
    public $verbs;
    public $expression;
    public $message;
    public $deniedCallback;
    public function isUserAllowed($user,$controller,$action,$ip,$verb)
    {
        if($this->isActionMatched($action)
            && $this->isUserMatched($user)
            && $this->isRoleMatched($user)
            && $this->isIpMatched($ip)
            && $this->isVerbMatched($verb)
            && $this->isControllerMatched($controller)
            && $this->isExpressionMatched($user))
            return $this->allow ? 1 : -1;
        else
            return 0;
    }
    protected function isActionMatched($action)
    {
        return empty($this->actions) || in_array(strtolower($action->getId()),$this->actions);
    }
    protected function isControllerMatched($controller)
    {
        return empty($this->controllers) || in_array(strtolower($controller->getUniqueId()),$this->controllers);
    }
    protected function isUserMatched($user)
    {
        if(empty($this->users))
            return true;
        foreach($this->users as $u)
        {
            if($u==='*')
                return true;
            elseif($u==='?' && $user->getIsGuest())
                return true;
            elseif($u==='@' && !$user->getIsGuest())
                return true;
            elseif(!strcasecmp($u,$user->getName()))
                return true;
        }
        return false;
    }
    protected function isRoleMatched($user)
    {
        if(empty($this->roles))
            return true;
        foreach($this->roles as $key=>$role)
        {
            if(is_numeric($key))
            {
                if($user->checkAccess($role))
                    return true;
            }
            else
            {
                if($user->checkAccess($key,$role))
                    return true;
            }
        }
        return false;
    }
    protected function isIpMatched($ip)
    {
        if(empty($this->ips))
            return true;
        foreach($this->ips as $rule)
        {
            if($rule==='*' || $rule===$ip || (($pos=strpos($rule,'*'))!==false && !strncmp($ip,$rule,$pos)))
                return true;
        }
        return false;
    }
    protected function isVerbMatched($verb)
    {
        return empty($this->verbs) || in_array(strtolower($verb),$this->verbs);
    }
    protected function isExpressionMatched($user)
    {
        if($this->expression===null)
            return true;
        else
            return $this->evaluateExpression($this->expression, array('user'=>$user));
    }
}
class CHasManyRelation extends CActiveRelation
{
    public $limit=-1;
    public $offset=-1;
    public $index;
    public function mergeWith($criteria,$fromScope=false)
    {
        if($criteria instanceof CDbCriteria)
            $criteria=$criteria->toArray();
        parent::mergeWith($criteria,$fromScope);
        if(isset($criteria['limit']) && $criteria['limit']>0)
            $this->limit=$criteria['limit'];
        if(isset($criteria['offset']) && $criteria['offset']>=0)
            $this->offset=$criteria['offset'];
        if(isset($criteria['index']))
            $this->index=$criteria['index'];
    }
}
abstract class CValidator extends CComponent
{
    public static $builtInValidators=array(
        'required'=>'CRequiredValidator',
        'filter'=>'CFilterValidator',
        'match'=>'CRegularExpressionValidator',
        'email'=>'CEmailValidator',
        'url'=>'CUrlValidator',
        'unique'=>'CUniqueValidator',
        'compare'=>'CCompareValidator',
        'length'=>'CStringValidator',
        'in'=>'CRangeValidator',
        'numerical'=>'CNumberValidator',
        'captcha'=>'CCaptchaValidator',
        'type'=>'CTypeValidator',
        'file'=>'CFileValidator',
        'default'=>'CDefaultValueValidator',
        'exist'=>'CExistValidator',
        'boolean'=>'CBooleanValidator',
        'safe'=>'CSafeValidator',
        'unsafe'=>'CUnsafeValidator',
        'date'=>'CDateValidator',
    );
    public $attributes;
    public $message;
    public $skipOnError=false;
    public $on;
    public $except;
    public $safe=true;
    public $enableClientValidation=true;
    abstract protected function validateAttribute($object,$attribute);
    public static function createValidator($name,$object,$attributes,$params=array())
    {
        if(is_string($attributes))
            $attributes=preg_split('/[\s,]+/',$attributes,-1,PREG_SPLIT_NO_EMPTY);
        if(isset($params['on']))
        {
            if(is_array($params['on']))
                $on=$params['on'];
            else
                $on=preg_split('/[\s,]+/',$params['on'],-1,PREG_SPLIT_NO_EMPTY);
        }
        else
            $on=array();
        if(isset($params['except']))
        {
            if(is_array($params['except']))
                $except=$params['except'];
            else
                $except=preg_split('/[\s,]+/',$params['except'],-1,PREG_SPLIT_NO_EMPTY);
        }
        else
            $except=array();
        if(method_exists($object,$name))
        {
            $validator=new CInlineValidator;
            $validator->attributes=$attributes;
            $validator->method=$name;
            if(isset($params['clientValidate']))
            {
                $validator->clientValidate=$params['clientValidate'];
                unset($params['clientValidate']);
            }
            $validator->params=$params;
            if(isset($params['skipOnError']))
                $validator->skipOnError=$params['skipOnError'];
        }
        else
        {
            $params['attributes']=$attributes;
            if(isset(self::$builtInValidators[$name]))
                $className=Yii::import(self::$builtInValidators[$name],true);
            else
                $className=Yii::import($name,true);
            $validator=new $className;
            foreach($params as $name=>$value)
                $validator->$name=$value;
        }
        $validator->on=empty($on) ? array() : array_combine($on,$on);
        $validator->except=empty($except) ? array() : array_combine($except,$except);
        return $validator;
    }
    public function validate($object,$attributes=null)
    {
        if(is_array($attributes))
            $attributes=array_intersect($this->attributes,$attributes);
        else
            $attributes=$this->attributes;
        foreach($attributes as $attribute)
        {
            if(!$this->skipOnError || !$object->hasErrors($attribute))
                $this->validateAttribute($object,$attribute);
        }
    }
    public function clientValidateAttribute($object,$attribute)
    {
    }
    public function applyTo($scenario)
    {
        if(isset($this->except[$scenario]))
            return false;
        return empty($this->on) || isset($this->on[$scenario]);
    }
    protected function addError($object,$attribute,$message,$params=array())
    {
        $params['{attribute}']=$object->getAttributeLabel($attribute);
        $object->addError($attribute,strtr($message,$params));
    }
    protected function isEmpty($value,$trim=false)
    {
        return $value===null || $value===array() || $value==='' || $trim && is_scalar($value) && trim($value)==='';
    }
}
class CStringValidator extends CValidator
{
    public $max;
    public $min;
    public $is;
    public $tooShort;
    public $tooLong;
    public $allowEmpty=true;
    public $encoding;
    protected function validateAttribute($object,$attribute)
    {
        $value=$object->$attribute;
        if($this->allowEmpty && $this->isEmpty($value))
            return;
        if(is_array($value))
        {
            // https://github.com/yiisoft/yii/issues/1955
            $this->addError($object,$attribute,Yii::t('yii','{attribute} is invalid.'));
            return;
        }
        if(function_exists('mb_strlen') && $this->encoding!==false)
            $length=mb_strlen($value, $this->encoding ? $this->encoding : Yii::app()->charset);
        else
            $length=strlen($value);
        if($this->min!==null && $length<$this->min)
        {
            $message=$this->tooShort!==null?$this->tooShort:Yii::t('yii','{attribute} is too short (minimum is {min} characters).');
            $this->addError($object,$attribute,$message,array('{min}'=>$this->min));
        }
        if($this->max!==null && $length>$this->max)
        {
            $message=$this->tooLong!==null?$this->tooLong:Yii::t('yii','{attribute} is too long (maximum is {max} characters).');
            $this->addError($object,$attribute,$message,array('{max}'=>$this->max));
        }
        if($this->is!==null && $length!==$this->is)
        {
            $message=$this->message!==null?$this->message:Yii::t('yii','{attribute} is of the wrong length (should be {length} characters).');
            $this->addError($object,$attribute,$message,array('{length}'=>$this->is));
        }
    }
    public function clientValidateAttribute($object,$attribute)
    {
        $label=$object->getAttributeLabel($attribute);
        if(($message=$this->message)===null)
            $message=Yii::t('yii','{attribute} is of the wrong length (should be {length} characters).');
        $message=strtr($message, array(
            '{attribute}'=>$label,
            '{length}'=>$this->is,
        ));
        if(($tooShort=$this->tooShort)===null)
            $tooShort=Yii::t('yii','{attribute} is too short (minimum is {min} characters).');
        $tooShort=strtr($tooShort, array(
            '{attribute}'=>$label,
            '{min}'=>$this->min,
        ));
        if(($tooLong=$this->tooLong)===null)
            $tooLong=Yii::t('yii','{attribute} is too long (maximum is {max} characters).');
        $tooLong=strtr($tooLong, array(
            '{attribute}'=>$label,
            '{max}'=>$this->max,
        ));
        $js='';
        if($this->min!==null)
        {
            $js.="
if(value.length<{$this->min}) {
    messages.push(".CJSON::encode($tooShort).");
}
";
        }
        if($this->max!==null)
        {
            $js.="
if(value.length>{$this->max}) {
    messages.push(".CJSON::encode($tooLong).");
}
";
        }
        if($this->is!==null)
        {
            $js.="
if(value.length!={$this->is}) {
    messages.push(".CJSON::encode($message).");
}
";
        }
        if($this->allowEmpty)
        {
            $js="
if(jQuery.trim(value)!='') {
    $js
}
";
        }
        return $js;
    }
}
class CRequiredValidator extends CValidator
{
    public $requiredValue;
    public $strict=false;
    public $trim=true;
    protected function validateAttribute($object,$attribute)
    {
        $value=$object->$attribute;
        if($this->requiredValue!==null)
        {
            if(!$this->strict && $value!=$this->requiredValue || $this->strict && $value!==$this->requiredValue)
            {
                $message=$this->message!==null?$this->message:Yii::t('yii','{attribute} must be {value}.',
                    array('{value}'=>$this->requiredValue));
                $this->addError($object,$attribute,$message);
            }
        }
        elseif($this->isEmpty($value,$this->trim))
        {
            $message=$this->message!==null?$this->message:Yii::t('yii','{attribute} cannot be blank.');
            $this->addError($object,$attribute,$message);
        }
    }
    public function clientValidateAttribute($object,$attribute)
    {
        $message=$this->message;
        if($this->requiredValue!==null)
        {
            if($message===null)
                $message=Yii::t('yii','{attribute} must be {value}.');
            $message=strtr($message, array(
                '{value}'=>$this->requiredValue,
                '{attribute}'=>$object->getAttributeLabel($attribute),
            ));
            return "
if(value!=" . CJSON::encode($this->requiredValue) . ") {
    messages.push(".CJSON::encode($message).");
}
";
        }
        else
        {
            if($message===null)
                $message=Yii::t('yii','{attribute} cannot be blank.');
            $message=strtr($message, array(
                '{attribute}'=>$object->getAttributeLabel($attribute),
            ));
            if($this->trim)
                $emptyCondition = "jQuery.trim(value)==''";
            else
                $emptyCondition = "value==''";
            return "
if({$emptyCondition}) {
    messages.push(".CJSON::encode($message).");
}
";
        }
    }
}
class CNumberValidator extends CValidator
{
    public $integerOnly=false;
    public $allowEmpty=true;
    public $max;
    public $min;
    public $tooBig;
    public $tooSmall;
    public $integerPattern='/^\s*[+-]?\d+\s*$/';
    public $numberPattern='/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/';
    protected function validateAttribute($object,$attribute)
    {
        $value=$object->$attribute;
        if($this->allowEmpty && $this->isEmpty($value))
            return;
        if(!is_numeric($value))
        {
            // https://github.com/yiisoft/yii/issues/1955
            // https://github.com/yiisoft/yii/issues/1669
            $message=$this->message!==null?$this->message:Yii::t('yii','{attribute} must be a number.');
            $this->addError($object,$attribute,$message);
            return;
        }
        if($this->integerOnly)
        {
            if(!preg_match($this->integerPattern,"$value"))
            {
                $message=$this->message!==null?$this->message:Yii::t('yii','{attribute} must be an integer.');
                $this->addError($object,$attribute,$message);
            }
        }
        else
        {
            if(!preg_match($this->numberPattern,"$value"))
            {
                $message=$this->message!==null?$this->message:Yii::t('yii','{attribute} must be a number.');
                $this->addError($object,$attribute,$message);
            }
        }
        if($this->min!==null && $value<$this->min)
        {
            $message=$this->tooSmall!==null?$this->tooSmall:Yii::t('yii','{attribute} is too small (minimum is {min}).');
            $this->addError($object,$attribute,$message,array('{min}'=>$this->min));
        }
        if($this->max!==null && $value>$this->max)
        {
            $message=$this->tooBig!==null?$this->tooBig:Yii::t('yii','{attribute} is too big (maximum is {max}).');
            $this->addError($object,$attribute,$message,array('{max}'=>$this->max));
        }
    }
    public function clientValidateAttribute($object,$attribute)
    {
        $label=$object->getAttributeLabel($attribute);
        if(($message=$this->message)===null)
            $message=$this->integerOnly ? Yii::t('yii','{attribute} must be an integer.') : Yii::t('yii','{attribute} must be a number.');
        $message=strtr($message, array(
            '{attribute}'=>$label,
        ));
        if(($tooBig=$this->tooBig)===null)
            $tooBig=Yii::t('yii','{attribute} is too big (maximum is {max}).');
        $tooBig=strtr($tooBig, array(
            '{attribute}'=>$label,
            '{max}'=>$this->max,
        ));
        if(($tooSmall=$this->tooSmall)===null)
            $tooSmall=Yii::t('yii','{attribute} is too small (minimum is {min}).');
        $tooSmall=strtr($tooSmall, array(
            '{attribute}'=>$label,
            '{min}'=>$this->min,
        ));
        $pattern=$this->integerOnly ? $this->integerPattern : $this->numberPattern;
        $js="
if(!value.match($pattern)) {
    messages.push(".CJSON::encode($message).");
}
";
        if($this->min!==null)
        {
            $js.="
if(value<{$this->min}) {
    messages.push(".CJSON::encode($tooSmall).");
}
";
        }
        if($this->max!==null)
        {
            $js.="
if(value>{$this->max}) {
    messages.push(".CJSON::encode($tooBig).");
}
";
        }
        if($this->allowEmpty)
        {
            $js="
if(jQuery.trim(value)!='') {
    $js
}
";
        }
        return $js;
    }
}
class CListIterator implements Iterator
{
    private $_d;
    private $_i;
    private $_c;
    public function __construct(&$data)
    {
        $this->_d=&$data;
        $this->_i=0;
        $this->_c=count($this->_d);
    }
    public function rewind()
    {
        $this->_i=0;
    }
    public function key()
    {
        return $this->_i;
    }
    public function current()
    {
        return $this->_d[$this->_i];
    }
    public function next()
    {
        $this->_i++;
    }
    public function valid()
    {
        return $this->_i<$this->_c;
    }
}
interface IStatePersister
{
    public function load();
    public function save($state);
}
interface IFilter
{
    public function filter($filterChain);
}
interface IAction
{
    public function getId();
    public function getController();
}
interface IWebServiceProvider
{
    public function beforeWebMethod($service);
    public function afterWebMethod($service);
}
interface IViewRenderer
{
    public function renderFile($context,$file,$data,$return);
}
interface IUserIdentity
{
    public function authenticate();
    public function getIsAuthenticated();
    public function getId();
    public function getName();
    public function getPersistentStates();
}
interface IAuthManager
{
    public function checkAccess($itemName,$userId,$params=array());
    public function createAuthItem($name,$type,$description='',$bizRule=null,$data=null);
    public function removeAuthItem($name);
    public function getAuthItems($type=null,$userId=null);
    public function getAuthItem($name);
    public function saveAuthItem($item,$oldName=null);
    public function addItemChild($itemName,$childName);
    public function removeItemChild($itemName,$childName);
    public function hasItemChild($itemName,$childName);
    public function getItemChildren($itemName);
    public function assign($itemName,$userId,$bizRule=null,$data=null);
    public function revoke($itemName,$userId);
    public function isAssigned($itemName,$userId);
    public function getAuthAssignment($itemName,$userId);
    public function getAuthAssignments($userId);
    public function saveAuthAssignment($assignment);
    public function clearAll();
    public function clearAuthAssignments();
    public function save();
    public function executeBizRule($bizRule,$params,$data);
}
interface IWidgetFactory
{
    public function createWidget($owner,$className,$properties=array());
}
interface IDataProvider
{
    public function getId();
    public function getItemCount($refresh=false);
    public function getTotalItemCount($refresh=false);
    public function getData($refresh=false);
    public function getKeys($refresh=false);
    public function getSort();
    public function getPagination();
}
interface ILogFilter
{
    public function filter(&$logs);
}
